# A note on headers: NGINX has built in support for adding headers with 'add_header', but this is problematic because it
# simply appends headers to the request and doesn't care if a particular header already exists on the request - in this
# case, you just end up with multiples of the same header. This is a problem for CORS, where the browsers will examine
# all CORS headers (including duplicates) and will default to using the most lax where duplicates exists, this behaviour
# can and does result in broken CORS functionality. Instead, we use Headers More
# (https://www.nginx.com/resources/wiki/modules/headers_more/), which allows us to add, set (i.e. replace), and remove
# headers.

# This block is not technically needed since we only expose the container on port 443...
server {
    listen 80;
    listen [::]:80;

    server_name ${SERVER_NAME};

    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name ${SERVER_NAME};

    # SSL Configuration
    ssl_certificate /etc/nginx/ssl/bk-ci-data4.dpi.bfi.org.uk.crt;
    ssl_certificate_key /etc/nginx/ssl/bk-ci-data4.dpi.bfi.org.uk.key;
    ssl_session_timeout 1d;
    ssl_session_cache shared:MozSSL:10m; # about 40000 sessions
    ssl_session_tickets off;

    # Modern SSL protocol configuration.
    ssl_protocols TLSv1.3;
    ssl_prefer_server_ciphers off;

    # HSTS (ngx_http_headers_module is required) (15,778,476 seconds = 6 months).
    more_set_headers "Strict-Transport-Security: max-age=15778476";

    location / {
        # Auth module configuration.
        auth_request /auth;
        auth_request_set $auth_status $upstream_status;

        # Service CORS prelfight requests.
        if ($request_method = 'OPTIONS') {
            return 204;
        }

        # Standard proxy headers - 'X-Forwarded-*' and 'X-Real-*'.
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Scheme $scheme;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Real-IP $remote_addr;

        # Endpoint to proxy requests to.
        proxy_pass ${ENDPOINT_SCHEME}://${ENDPOINT_HOSTNAME}:${ENDPOINT_PORT};

        # Attach the necessary CORS headers attached to the response.
        more_set_headers "Access-Control-Allow-Origin: ${VIEWER_SCHEME}://${VIEWER_HOSTNAME}"; # Wildcards can't be used here when 'Access-Control-Allow-Credentials' is set to 'true'.
        more_set_headers "Access-Control-Allow-Headers: *"; # TODO Can probably do better than this...
        more_set_headers "Access-Control-Allow-Methods: OPTIONS,GET";
        more_set_headers "Access-Control-Allow-Credentials: true"; # Required so browsers can cross-origin cookies.

        # Remove any unnecessary CORS headers from the upstream response.
        more_clear_headers "Access-Control-Expose-Headers";
        more_clear_headers "Access-Control-Max-Age";
    }

    location /auth {
        # This tells NGINX that this path is not accessible from outside.
        internal;

        # Don't pass any request body (there shouldn't be one anyway) to the request logging endpoint.
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";

        # Add the custom 'X-API-*' headers, expected by the request logging endpoint. These define what is logged in the logging platform.
        proxy_set_header X-API-RequestURI https://$host$request_uri;
        proxy_set_header X-API-RequestType ${API_REQUEST_TYPE};

        # The request logging endpoint.
        proxy_pass ${LOGGING_SCHEME}://${LOGGING_HOSTNAME}:${LOGGING_PORT}/api/request;

        # Request to the logging endpoint are SSL validated.
        proxy_ssl_trusted_certificate /etc/nginx/ssl/bfi-iiif-root-ca.crt;
        proxy_ssl_server_name on;
        proxy_ssl_verify on;
        proxy_ssl_verify_depth 2;
        proxy_ssl_session_reuse on;
    }
}
